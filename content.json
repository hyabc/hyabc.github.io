{"pages":[{"title":"About me","text":"Hello there! ^_^ I am Tom Tang, a Carnegie Mellon University 2024 student majoring in Electrical and Computer Engineering. My favourite language is C/C++! C++ has lots of features and makes me feel very powerful, and I can write super fast programs with it. Also, the first language I learned is Pascal, and I have some experience with other languages like Python, Java, JavaScript, PHP, Go. I like computer programming (although I don’t like functional programming… no SML). My favourite text editor is vim (I can’t remember all the shortcuts in emacs…) and I’m currently using Debian. Debian is very, very stable in my experience (Ubuntu/Fedora/Manjaro are a bit shaky… I don’t want anything to break just by running package upgrades). I’m also a big fan of RHEL/Centos, which is extremely solid (10-year OS support is a super nice idea for me). I’m using Debian because Debian packages are newer than RHEL. However, I do prefer RHEL’s yum/dnf package manager compared to apt. yum/dnf can list and undo history operations, so it’s very robust. It could be messy to undo an operation in apt such as “apt install”. And RHEL is closer to upstream developers (consider Debian Apache’s “site-enabled”…). My user id on many websites is ‘hyabc’, because my middle school’s name is ‘hy’, and unfortunately I registered users on many websites when I was in middle school (TAT) and I don’t want to change them all. My Codeforces id is also hyabc (and the avatar picture is 南つばめ in Memories Off 2 – “Have you seen the wind?”). My legal name is Yize Tang. However, “Yize” is too hard to pronounce, and I thought “Tom” would be more human readable. In addition, I’m a AFO OIer, and I had a great time programming algorithms or data structures in C++. In addition, I like playing Touhou Project games, watching animations, and working on many programming projects. I’m working as a TA for 18220 in this semester (as well as Spring 2022 and Fall 2022)! Circuits are super fun! I worked at NVIDIA in Summer 2022. NVIDIA is a really cool company. A more “serious” website at CMU","link":"/about/index.html"},{"title":"Tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"CMU Course List","text":"CMU Course List (Project Candela) is released (including next semester courses)! Welcome to post comments/tags/pages to courses!","link":"/cmu-course-list/"},{"title":"Christmas 2022","text":"Merry Christmas! All stores near CMU are closed, so I bought some “Instant Ramen”!","link":"/christmas-2022/"},{"title":"AMD Yes!","text":"AMD YES! Linux installs without any problem. The only issue is battery drain when poweroff (which is strange), and downgrading BIOS to version 1.29 solves this.","link":"/amd-yes/"},{"title":"Computer Design","text":"This book is a very fun book about computer architecture, and I highly recommend this book! It describes some design concepts that are quite useful in the real world: Design for Moore’s law Use abstraction to simplify design Make the common case fast Performance via parallelism Performance via pipelining Performance via prediction Hierarchy of memories Dependability via redundancy","link":"/computer-design/"},{"title":"Debian 12 &quot;Bookworm&quot;","text":"Debian 12 “Bookworm” has been released last month (June 2023)! DevelopmentDebian 12 comes with recent development tools, such as GCC 12.2 Clang 14.0 Linux 6.1 Python 3.11 Vim 9.0 Java 17.0 PHP 8.2 Node 18.13 DesktopGNOME 43.4 is shipped with Debian 12. Compared to the GNOME desktop in Debian 11, it has built-in power management features, a notification area that looks nicer (and resembles the one in Windows 11), and better support for dark theme. One major change is the virtual desktops are horizontally aligned now. UpgradeMy upgrade process is extremely smooth. Just need to change repository and let apt upgrade, and after a reboot the system becomes Debian 12 (&gt;w&lt;). The only noticeable changes are: TLP is replaced by GNOME power management utility. Honestly I think TLP is more powerful and provides more control, but GNOME seems to be sufficient for laptops in most cases. unattended-upgrades is replaced by GNOME software. I really don’t like GNOME software (it is way less reliable than unattended-upgrades), so I will just run updates manually. Overall it’s a nice system upgrade. Debian 12 works as reliable as any Debian releases.","link":"/debian-12/"},{"title":"Demosplash 2021!","text":"CMU Computer Club is hosting Demosplash 2021! There are a lot of exciting machines!","link":"/demosplash-2021/"},{"title":"ACM-ICPC ECNA 2021 Solution","text":"ACM-ICPC East Central North America Regional 2021 was held on Feb 27, 2022. Here is a link to the contest scoreboard, and I’m part of the team CMU9. The contest was held on computer clusters on 5th floor of GHC, because the competition was remote this year. Here is a photo of the contest! A. 1’s For AllNotice the unusual 15 second time limit. We can brute-force with a simple $O(n^2)$ DP and costs $5 \\times 10^9$ time. And surprisingly, it passed the time limit! B. Abridged ReadingWe want to select arbitrary two leaf nodes and the costs is all its ancestors. So for any two leaf nodes, we can compute their LCA and then compute their cost. C. Ball of WhacksThis problem looks too frustrating… I don’t like 3D objects. D. DownsizingIf you plug in any curve to the equation of the corresponding line, you will find that each curve is a piece of another circle. Now you can calculate the circle area. You can add the area of sector in the circle (1), subtract the triangle from circle center to the endpoints (2), and add triangle from point O to the endpoints (3). Then you get the directional area and then sum up. However, we got numerous Wrong Answer for this problem. There are two major issues. First, the line can intersect with the large circle. In this case, the generated circle has infinite radius and becomes a line, so you only need to calculate part (3). Second, when the circle sector is 180 degrees, you can’t determine whether it is $+180^\\circ$ or $-180^\\circ$. The two endpoints and the center of generated circle are on the same line. You will need to look at the sign of area (3) to determine the sign of (1). E. Gambling GameThis is a probability DP problem. You can use $f[i][j]$ to represent the probability of winning when you have i square remaining on your paper while there are j ball announces left. Now you can easily determine the probability of current ball announce eliminating a square, because the number of balls remaining decreases one when the number of ball announces decrease one. Then you can use Python bigint to avoid writing bigint manually! F. Growing Some OobleckThis is a simuation problem. Every time when there exist circles to be merged, you simulate the merge operation. When there are no circles to be merged, you determine the next timestamp that a circle merge will happen, and fast forward to that time. Be careful of floating point precision problem! G. Noonerized SpumbersBrute-force all possible prefixes. Because all integers are smaller than $2^{31}$, the length of integers are at most 10. So it will work. H. Numble(I don’t know how to solve this) I. Pinned FilesList the pinned elements and unpinned elements separately. First, in the optimal strategy, for any element, you operate on (pin/unpin) it at most twice. If you pin/unpin/pin element i, the result is equivalent to pin i at the timestamp of your last pin. If you pin/unpin/pin/unpin element j, the result is equivalent to pin/unpin j at the timestamp of last two operations (pin/unpin). Your previous operations to adjust the order become completely useless at the timestamp of your latest operation. Now, for any element that begin in the pinned list and end in the unpinned list (or opposite), it can only be operated exactly once. For any element that begin and end in the same list, it can cost zero or two operations. We want to maximize the zero-operation element, so we can just greedily count how many elements do not need any operation. J. RecyclingUse a monotone stack to compute the nearest element larger than itself to the left and to the right. Then loop over all elements to find the answer. K. Stable TableFirst, we can construct a directed graph, with “u =&gt; v” denoting if v is stable, then u is stable (equivalently, any square of node u is one square above any square of node v). We have a “top” set (containing at most 2 elements) and a “bottom” set, and we want the minimum number of paths from all top nodes toward any bottom node, and paths can be shared. We can start by a BFS with sources from all bottom nodes. If there are one top nodes, we just want a simple shortest path, and this is computed in BFS. If there are two top nodes, denoted by root1 and root2, an existing solution is the sum of distance from bottom node to root1 and root2. But the two top nodes can also share path to reach any bottom node. Then the path should look like a fork: whenever two path intersect, they intersect until bottom node. Now we can do another two BFS from root1 and root2, then iterate over all nodes (to consider it as the potential path intersection), and its value is the sum of three BFS (starting from i to root1, root2 and bottom node). L. StatuesWe can iterate over all possible directions, and for any square, count if it exists on its corresponding diagonal. Then compute the minimum answer among all direction. M. Tomb HaterIn this problem, because you can only move left/right/down, and you can visit one square only once, we know that we always visit a continuous segment on any line. Now we can maintain a Trie of the input strings, and make sure we are always staying on some node on the Trie. We can use DP with state $f[i][j][k]$ to represent we are currently on the i-th line, j-th column and Trie node k. Then we attempt to walk on the (i + 1)-th line and starting from column j. Notice that if we are on a Trie terminal node, we have the option of going back to root and continuing, so we have to maintain an array of all possible current Trie node.","link":"/ecna21/"},{"title":"NAT Penetration using FRP","text":"NAT penetration is useful in many cases. For example, if your ISP uses Carrier Grade NAT (CGNAT) and does not have a public IP address, you will need it to expose local service to be accessible from the public Internet. FRP is one powerful and simple to use NAT penetration tool. FRP documentation has more information on using FRP. To use frp, first download frp server and client (frps and frpc) binaries, and create a regular user for frps/frpc with useradd on the server and client for security reason. Server configurationFRP server binds a main port for the tunnel traffic, as well as allows clients to map other server ports back to client services. Then, client services can be accessed using server ip and the reqested port. Server can specify a simple token or password to authenicate client. FRP also supports using OpenID for authenication. The server also needs to open the TCP or UDP (if KCP is used) port in the firewall to allow incoming traffic. 123456[common]bind_port = &lt;main port&gt;kcp_bind_port = &lt;main port&gt;allow_ports = &lt;allowed mapping port region&gt;authentication_method = tokentoken = &lt;token&gt; Also, you can create a systemd service to control the frps process. Client can configure systemd service in a similar way. 1234567891011121314[Unit]Description=&lt;your description&gt;After=network.target[Service]Type=simpleUser=frpsGroup=frpsRestart=on-failureRestartSec=5sExecStart=/usr/bin/frps -c /etc/frp/frps.ini[Install]WantedBy=multi-user.target Client configurationClient connects to server port and requests to map local service to one server port. You can optionally use KCP instead of usual TCP as transport protocol for tunnel traffic, because KCP is a UDP-based protocol and it can reduce service latency. One client configuration file can contain multiple services and request one server port for each service. Also optionally enable or disable compression and encryption for each service. 1234567891011121314[common]server_addr = &lt;server address&gt;server_port = &lt;main port&gt;# protocol = kcpauthentication_method = tokentoken = &lt;token&gt;[&lt;service name&gt;]type = tcp/udplocal_ip = localhostlocal_port = &lt;local service port&gt;remote_port = &lt;requested server port&gt;# use_encryption = true# use_compression = true Finally, enable and start both frps and frpc with systemd, and your local service should be accessible from the Internet!","link":"/frp-tutorial/"},{"title":"Functional Programming is Terrible","text":"Functional programming is somewhat popular at CMU. There is even a course about it. However, functional programming is the worst programming paradigm. For the marketing points of the course, FP isn’t better for program verification: Verification is almost trivial without mutable states, in almost all programming languages. Analyzing control flow, etc. isn’t hard as long as the syntax is well-defined. States are the challenge to automatic verification, and functional programming is supposed to be immutable and have no state. But you can’t avoid states in real life. States are what makes software useful. If you write a program without mutable states, it is essentially one huge expression and just some adapter code. You can’t even implement dynamic programming without some kind of states for memorization. FP makes parallelism harder: It is true that making more things immutable can reduce the possibility for race conditions. But all common languages have const or final that control it better. And other languages have better parallelism ecosystem. C++ has CUDA/SIMD instrinstics, Go has goroutines, Java has Hadoop, and there are many others. Abstraction: It’s way easier to implement proper abstraction with OOP languages. OOP is mostly just about abstraction/encapsulation, and it does really well at that. OCaml has better abstraction by learning from OOP, but the syntax is still somewhat counterintuitive. And most FP languages use terrible language constructs, ADT: Abstract data types is a very inefficient way to represent data. ADT is often used recursively (if not, it is as harmless as std::variant). And it can be huge: there are often programs that store trees in ADT. The data have to be allocated on heap (compilers can’t know the size in advance) and all nodes are tagged (to store the variant). Now some seemingly innocuous data structures can be very inefficient. Pattern matching: Pattern matching has to be sequential because of the pattern matching priority from top to bottom, which makes it no more useful than a long list of if/else. And unfortunately you can’t avoid pattern matching because of ADT. FP significantly decreases code readability and maintainability: Lack of common features like loops, you have to use lambda functions instead. This is much more difficult to read than something like range-based for in most languages. You have to write a function to print 5 “Hello, world!” and good luck on your stack usage. And it becomes worse with high order function, it just wastes programmer effort to understand the code and the control flow. Most languages actually have a human-readable control flow, as early as Fortran! Don’t overuse lambda functions, in any language. Code reuse: There is essentially no polymorphism in FP languages. The type system is at most something like C++20 concepts and broken generics, that’s NOT polymorphism. FP makes complexity analysis harder: Do you want to analyze the time complexity of a huge mess of lambdas, function arguments, closures and expressions?","link":"/functional-programming/"},{"title":"Google Code Jam 2021 Round 1a Solution","text":"Append SortProblemGiven n-length array, $n \\leq 100$, each number is in $1 \\leq X_i \\leq 10^9$, make this array strictly-increasing by appending digit to any number. Return minimum number of digit needed. SolutionGreedy, if $X_i \\geq X_{i + 1}$, try to make $len(X_{i + 1})$ equal to $len(X_i)$ or $len(X_i)+1$ by comparing their prefix. Prime TimeProblemGiven a set of at most $10^{15}$ primes, each prime within $2 \\leq p_i \\leq 500$, return maximum value of $\\sum_{p_i \\not\\in S} p_i = \\prod_{p_i \\in S} p_i$ if there exist valid solution. SolutionTest set 1-2 (at most 100 total primes): Since $W = \\sum_{p_i \\not\\in S} p_i \\leq \\sum p_i \\leq 50000$, the product of primes is inside 50000, so we can search for set S such that $\\sum_{p_i \\in S} p_i + \\prod_{p_i \\in S} p_i = W$. This can be done in a DP-like way. Test set 3: W is very large. $\\prod_{p_i \\in S} p_i \\leq \\sum p_i \\leq 5 \\times 10^{17}$, each prime is at least 2, so $|S| \\leq 60$, so $\\sum_{p_i \\in S} p_i \\leq 60 \\times 500=30000$. Then the valid solution is in $[W - 30000, W]$ because $ans = \\prod_{p_i \\in S} p_i = W - \\sum_{p_i \\in S} p_i$. And the solution value is products of primes in $[2, 500]$. So try and factorize every number in this region and see if it can be expressed by product of available primes and has valid sum. Hacked ExamProblemThere are Q true/false problems, given n people’s solution sequence and number of correct answer, all consistent answer sequence have same probability, return a sequence with maximum expected number of correct answer. SolutionTest set 1-2 ($n \\leq 2, Q \\leq 40$): We can use DP to compute number of consistent sequence, and for each bit, compute the number of consistent sequence specifying this bit is true/false. Then we have the expected value of each bit being true/false, and sum because of the linearity of expectation. Test set 3 ($n \\leq 3, Q \\leq 120$): There are limited types of questions: when n = 3, there are 8 types of questions: FFF, FFT, …, TTT. Symmetrically (by flipping the result in the end to make FFT type -&gt; TTF type), there are only 4 types of questions. We can brute-force number of consistent sequences by counting number of T out of all available T/F (or number of questions in such type) in each of four type, times some combinatorics number, this takes $O((Q/4)^4)$. Then do in a similar way as previous case and count number of consistent sequences after specifying T/F for each bit.","link":"/gcj-2021-1a/"},{"title":"Code Jam 2022","text":"I received a Google Code Jam 2022 T-shirt:","link":"/gcj-2022/"},{"title":"Glory to Ukraine","text":"The world has witnessed another unjust and evil war, even in the 21st century. We stand with Ukraine!","link":"/glory-to-ukraine/"},{"title":"Goodbye, Spring 2021","text":"Spring 2021 马上就要结束了呢。 这个学期学到了很多有趣的内容！数学学了R2/R3上的微分（用partial derivative），积分（用Fubini Theorem和换元解决），以及scalar/vector surface integral。写作学了很多有用的知识（例如MLA格式，abstract, acknowledgement, Thesis-driven/IMRAD, novelty moves, 以及其他有趣的技巧）。计算机学了DFA, TM, Cook/Karp reduction, 随机/近似算法，还有对很多高级内容的入门。所以这个学期还是相当亦可赛艇的（笑） 暑假准备玩一下Go！","link":"/goodbye-spring-2021/"},{"title":"Hello, modules!","text":"Module is a very exciting part of C++20. Similar to Go modules, C++20 modules can save the compiler from repeatedly scanning header files. This will make C++ code build faster and become more modular (independent of #include order). And the Hello World program becomes easier to write XD This program is compiled using cl.exe 19.33 (MSVC v143, Visual Studio 2022). Gcc and Clang still don’t support importing standard library yet, and MSVC support is still experimental. But the future of C++ looks great! I learned C++98 in around 2014 (due to outdated C++ compilers in National Olympiad of Informatics: we were still using Ubuntu 10.10 (a non-LTS version, EOL in 2011) in competitions then because it still works). Since C++98, C++ has evolved significantly and helps programmers write modern, efficient code. The largest evolution is probably C++11 and C++20. Some impressive new features are: auto - Automatic type deduction, which saves us from typing something like std::vector&lt;std::vector&lt;int&gt; &gt;::const_iterator manually. constexpr and consteval - Compile time evaluation. As C++ users, we want extreme performance! enum class and std::variant - More structured enums and unions. Finally they are not just integer values. Range-based for - I guess it’s syntactic sugar, but it can be life-saving! Smart pointers - RAII is the right way to handle memory (as well as other resources) in an efficient way. concepts - Makes generic programming more fun and reliable. T&amp;&amp; - RValue reference. Together with copy elision, we can make data flow more efficiently by removing redundant copy operations. (Which type is auto&amp;&amp;?) Lambda function [] () {} - Sounds useful with STL algorithms. Ranges - More powerful “iterators”! Lots of cool stuff in STL (std::thread, std::atomic, std::bind, std::chrono, and many others).","link":"/hello-modules-cpp20/"},{"title":"Hello World!","text":"Hello World!!! This is my first post!","link":"/helloworld/"},{"title":"Hexo Icarus Theme Customization","text":"Icarus is a great theme for Hexo. And we can also customize it to make it more personal! We assume you installed hexo-theme-icarus as a node package via npm. If not, you can replace all the node_modules/hexo-theme-icarus path below to corresponding installation path. And make a backup of your current configuration before you proceed in case of any error! (Even More) Rounded CornersThe various containers, or “cards”, on the web page already have rounded corners. However, sometimes they don’t look round enough. We can manually adjust how much we want the rectangle corner to be curved. Go to node_modules/hexo-theme-icarus/include/style/base.styl and change $card-radius to your preferred size. I’m using $card-radius ?= 16px. Change Primary ColorsBy default, the “primary” color of this website is blue, which is the color of the color of hyperlinks, and active elements when you hover your mouse. This can be customized in the same base.styl file. Change the $primary variable to your favourite color, and there’s also other interesting variables like $navbar-item-active-color that you might consider to change. In the same file, you can also configure other elements like card shadows. It follows the same format as the usual CSS box-shadow. Wide Screen Page WidthThe default page width seems a bit too narrow under wide screens (there are some unused horizontal screen space). And you can modify it! Go to node_modules/hexo-theme-icarus/include/style/responsive.styl and this Javascript code determines the page width. For the widescreen section under function fullhd, I changed it to max-width: $widescreen - 1 * $gap and width: $widescreen - 1 * $gap. It’s sufficient for me to just minus one multiply the gap. Thanks this blog for the solution! Change Background ImageThis one seems fun. Instead of the default grey background, you can configure something more interesting. You can simply put the css inside hexo-theme-icarus. Go to this directory: node_modules/hexo-theme-icarus/source/css, create a file (for example, bg.styl. You can use the generic way of setting the background image of any webpage: 1234567body { background-image: url(&quot;/path/to/your/background/image.jpg&quot;); background-size: cover; background-repeat: no-repeat; background-attachment: fixed; background-position: 50% 50%;} Then, include this file to the Hexo generation system by adding 1@import 'bg' to style.styl file. Now you have a working background image in your website! This blog uses a CG from Sakura no Uta as the background image.","link":"/hexo-icarus-customization/"},{"title":"Hexo Installation","text":"Install NodejsInstall hexo1$ npm install -g hexo-cli Create blog folder12$ hexo init blog$ npm install Install deployer and next theme12$ npm install hexo-deployer-git $ npm install hexo-theme-next Copy and customize theme file1$ cp node-modules/hexo-theme-next/_config.yml _config.next.yml Create new post12$ hexo n &quot;post-title&quot;$ hexo n page &quot;page-title&quot; Generate1$ hexo g Local testing server1$ hexo s # or hexo s -g for generate Deploy1$ hexo d # or hexo d -g for generate","link":"/hexo-installation/"},{"title":"Homecoming Week 2021","text":"Homecoming Week!","link":"/homecoming-2021/"},{"title":"杂记","text":"在这个幻想乡，可不能按常理出牌！","link":"/misc-1/"},{"title":"MOSFET Review","text":"MOSFET has the following operation regions: Cutoff region: When $V_{GS} &lt; V_{TH}$. MOSFET acts like open circuit. Triode region: When $V_{GS} &gt; V_{TH}$ and $V_{DS} &lt; V_{GS} - V_{TH}$.In this region, the current flowing from drain to source is $I_{D} = {k \\over 2} [ 2 (V_{GS} - V_{TH}) V_{DS} - V_{DS}^2 ]$. When $V_{DS}$ is very small, this is approximately $I_{D} = k (V_{GS} - V_{TH}) V_{DS}$ and the MOSFET can be regarded as a resistor of resistance $R_{ch} = k (V_{GS} - V_{TH})$.It’s common to use this region in digital circuit because it behaves like a digital switch whose resistance is either 0 or $R_{ch}$. Saturation region: When $V_{GS} &gt; V_{TH}$ and $V_{DS} &gt; V_{GS} - V_{TH}$.In this region, the current flowing from drain to source is $I_{D} = {k \\over 2} ( V_{GS} - V_{TH} )^2$. The MOSFET can be regarded as a voltage-controlled current source.It’s common to use this region in analog circuit because it provides the largest gain from input $V_{GS}$. The above are for NMOS. For PMOS, change the sign of $V_{GS}$, $V_{TH}$ and $V_{DS}$ and other things are similar.","link":"/mosfet-review/"},{"title":"NVIDIA Omniverse Ramen Shop","text":"NVIDIA created a ramen shop using the NVIDIA omniverse platform. Here is a video of the ramen shop (original blog post): This video is absolutely mind-blowing for me. Using NVIDIA’s graphics technology, human beings are able to replicate the real world in digital systems with an amazing amount of details. This capability is fueled by the growth of the gaming industry towards a more realistic and exciting gaming experience. The “omniverse” capability would help many industries digitalize. They can use omniverse to create more advanced and complex models (compared to traditional CAD models) and do more simulations before making a physical prototype, which will transform the development process and help companies innovate faster. This is a step closer to a fully digitalized world.","link":"/nvidia-ramen-shop/"},{"title":"OpenGL ES 3 Review","text":"tyz is currently developing a game based on OpenGL ES 3.0 for 3D graphics. This article will review how to develop an OpenGL ES 3 application. ShadersThere are two types of shaders: vertex shader and fragment shader. Vertex shader processes data for each vertex and both specifies the actual position in the “clip space” (gl_Position) and passes data to fragment shader. Based on the incoming data, fragment shader processes data for each fragment (similar to pixel, so fragment shaders are sometimes called pixel shaders) and specifies the color for the fragment. Both of shaders run on GPU to reduce CPU processing load. This statement actually has a issue. Suppose you want to draw a triangle and the vertex shader passes on data about the three vertices. However, there are much more than three fragments inside the triangle surface that expects input. The graphics hardware will actually perform interpolation on the data from the output of vertex shader to input of fragment shader. Users can specify “flat interpolation” in OpenGL ES 3 API to disable such interpolation. As users can write custom shaders, OpenGL ES 3 does not use a fixed graphics pipeline to perform different operations, like OpenGL ES 1.x. To support things like lighting effects, users should write vertex and fragment shaders. Attributes and uniformsInput data are passed to the shader programs through attributes and uniforms. Attributes can be different for different input vertices. You can input either an array or a single element and the corresponding data for each vertex will go to shader input. However, OpenGL ES 3 requires a minimum of 16 attributes for all implementations, so to make program runs on every platforms that conforms to OpenGL ES 3 specification, the user can use at most 16 attributes. Uniforms are the same for all vertices, and the minimum number of supporting uniforms are much larger. Vertex Buffer Objects (VBO) and Vertex Array Objects (VAO)Data transferring between main memory and graphics memory are expensive. It is not very efficient to transfer memory on each draw operation. OpenGL ES 3 supports creating a buffer on the graphics memory and storing data there, so that drawing is more efficient. Users can create a buffer by glGenBuffers and store by glBufferData. This is known as Vertex Buffer Objects. Because there are fixed number of buffer targets, users can use Vertex Array Objects to store multiple vertex array data, vertex indices data, etc. in different places. TexturesTextures can be applied when drawing objects. You can create a texture by glGenTextures and input the bitmap data into the texture by glTexImage2D. Then you can access texture data in shader programs by a sampler2D uniform.","link":"/opengles-3-review/"},{"title":"Project Radiation","text":"BackgroundI like using Miniflux to read RSS feeds! Miniflux has a very nice web UI to read articles and manage feeds/categories. But sometimes I’m too lazy to open a browser to read news. So I decided to write a simple CLI client using Miniflux API. Project RadiationWith Project Radiation, you can read news articles directly in your terminal! The program uses a command prompt to select between listing entry list, displaying article content, and switching to next/previous pages. And paging is supported both on entry list and article content. The default action (empty command) is to display the first available article and its consecutive pages, so that normally the only thing users needs to do is press Enter repeatedly. You can see the command prompt being “&gt; “ in normal mode and “(id) &gt;” in article paging mode (activated when an article has more than one page). External ProgramLynx is used to convert article content formatted in HTML into text strings to display in terminal, and it is called using the exec package. ConclusionThis is my first project using Go and programming in Go is fun! Returning error is more intuitive than the exception system in C++/Java and helps me write better error handling code, there are many useful packages built-in such as net/http and JSON encoding which is easy to use, calling external program and redirecting its stdin/stdout is easier than manually fork-exec-pipe-dup2 in C, and I implemented most features in Project Radiation faster than I expected.","link":"/project-radiation/"},{"title":"Project Railway!","text":"Background: I was using Rhythmbox to listen to music in GNOME desktop environment. Rhythmbox is an awesome and powerful music player. But several days ago, I think maybe browsing albums in the form of album cover picture grid will look better than browsing albums in album name list, so I start this project. Project Railway is a Gtk+ music player. It consists of the following parts: railway: GUI part. Controls all widgets. Also, calls the ffmpeg program to generate album cover picture for each album asynchronously with GTask, to not block GUI with time-consuming operation. railwaylibrary: Reads music library and generates arrays of song and album information. And uses GStreamer GstDiscoverer to retrieve song metadata, or “tags”, to sort music in track order. railwaymusic: The actual music player part. Calls GStreamer GstPlayer to do all the work. railwayplaylist: Manages the playlist by cloning a copy of song array. The resulting music player looks like: UPD: Support searching by album name or artist name now!","link":"/project-railway/"},{"title":"Project Ran!","text":"Project Ran is a javascript project. I’m learning js this summer because my previous web projects (like Project HTIC) rely on jumping to other pages to respond to any user action, which makes user experience not responsive. Javascript has many interesting features. It is not typed (you can assign a variable with a string then an integer, like in Python). Functions can be defined directly into a variable and that variable can be called. Function can be used to create objects using the new operator. And JSON is native here. Project Ran aims to implement a STG game similar to Touhou Project in javascript. In Touhou Eiyashou ~ Imperishable Night (東方永夜抄 ~ Imperishable Night), Yakumo Ran (八雲藍, blue) is the shikigami of Yakumo Yukari (八雲紫, purple). Ran is used as project name here because Ran is relatively like a computer. I think the basic features of a STG game have been implemented, including entrance/game interfaces, bullet drawing and shooting, judge of player and enemy damage, high/low speed change, life/bomb counting, so at least it is runnable. But many things should be improved, including better art, game story, enemy characters, and better animations, like player start or bombing effect in 東方永夜抄. The animations look primitive now. It takes me many time and code to draw simple animation like circle animations at speedchange event. The basic object for drawing things is shape. Then a bullet_array helps manage an array of shapes (bullets) shoot by player and enemy. A player or enemy has-a shape to represent themselves and a bullet_array to represent the bullets they shoot. A arena_game maintains currently active enemies, invoke player and enemy to draw and judge bullet damage. A game either has-a arena_game or a arena_text (which displays text on screen) depending on the story.","link":"/project-ran/"},{"title":"PulseAudio Issue","text":"Recently I upgraded to Linux kernel 5.19 (using Debian backports) and updated UEFI firmware. First, there is a kernel error message about unstable tsc clocksource issue, and I added tsc=nowatchdog to kernel parameter (also I added iommu=pt). (This is a bug in Lenovo’s firmware.) However, the audio output from 3.5mm audio jack contains some noise. It is solved after I changed 1load-module module-udev-detect to 1load-module module-udev-detect tsched=0 in /etc/pulse/default.pa, but I still don’t know why it works. Update: My microphone doesn’t work recently, and it works after I reverted this change…","link":"/pulseaudio-issue/"},{"title":"Quartus Warnings","text":"Real C++ programmers ignore warnings!","link":"/quartus-warning/"},{"title":"Project Railway Documentation","text":"BackgroundIn recent days I was debugging some strange crashes of Project Railway. The railway process sometimes receives signal SIGSEGV when calling gst_player_new or gst_player_play. After switching to calling the mpg123 program by fork-exec as music playing backend, currently there are no crashes. Maybe I should write some documentation to explain the program. RailwayMusicRailwayMusic does the actual work by calling mpg123, using its remote control mode. void init_music(): Constructor function; launch mpg123 and create read/write file pointers that sends to mpg123; launch music_wait thread.void destroy_music(): Destructor function; cancel and wait for the thread; tells mpg123 to quit and wait for it.void music_play(song_type*): Ask mpg123 to stop and load this song.void music_volume(double): Pass volume to mpg123.void music_pause_trigger(): Pass pause to mpg123.bool music_is_playing(): Get the play state boolean.void* music_wait(void*): Thread that continuously read output of mpg123.int music_update(void*): Update function that run every 1 sec in the main thread to update progress bar and switch to next song if necessary. RailwayPlaylistRailwayPlaylist is a simple part to maintain current playlist. It contains the current track index in playlist_ptr. void init_playlist(): Constructor function; init vars.void destroy_playlist(): Destructor function; cleanup playlist_array if necessary; reset vars.void generate_playlist(song_type*): Generate playlist array by cloning the current song_array.void playlist_next(): Modify playlist_ptr; calls play_song to do actual music playing.void playlist_prev(): Similar to playlist_next.void playlist_play(song_type*): To play a new song that changes the playlist. First destroy and regenerate the playlist, and call play_song.void playlist_set_shuffle(bool): Set shuffle status.void playlist_set_repeat(bool): Set repeat status. RailwayLibRailwayLib manages the library of albums and songs, configuration file, and gets music tags to sort songs by track id. void init_library(): Constructor function; get configuration values; init the gst_discoverer to get tags.void destroy_library(): Destructor function; cleanup resources.void generate_album_list(): To generate album_array; iterate over library directories and artist directories to generate a linked list of albums and convert to array (to find out number of albums and malloc accordingly).void generate_song_list(const album_type*): To generate song_array; iterate over each (regular) song file in a given album directory; create linked list and song array.void destroy_album_list(): Cleanup album array.void destroy_song_list(): Cleanup song array.void generate_album_button_image(GTask*, void*, album_type*, void*): Function for GTask thread to generate album cover picture; Get any song in the album; check if existing picture exist, and if not exist generate one using ffmpeg -n -i &lt;song filename&gt; &lt;image filename&gt;. RailwayRailway controls all GUI elements and sets their handlers. void music_position_update_cb(int, int): Update the song progress bar; called from update function in railwaymusic.void music_pause_button_trigger_cb(GtkWidget*, void*): Update the icon of the play/pause trigger button; call railwaymusic to trigger pause.void play_song(song_type*): Setting labels and images in the interface and pass to music_play; called from railwayplaylist.void init_albums(): Create album button grid.void destroy_albums(): Cleanup album button array.void init_window() &amp;&amp; void init_control(): Set signal handlers.bool substring_test(const char*, const char*): Substring test (case insensitive).bool search_judge(album_type*, const char*): Test if an album contains the given search term.","link":"/railway-doc/"},{"title":"Project RhythmGame526","text":"The game mentioned in the last post was completed! We demonstrated this game system in last week’s Build18 event from the ECE department (Project Haptic Rhythm Music Game). Here are some photos of the system: The vibrating motors (the black discs in the photos) are fun! It provides a very powerful haptic effect as we attach it to a 5V power source and switched by a MOSFET from Raspberry PI GPIO ports. And the code is structured so that it’s very easy to create customized games! You only need to create a “note” file containing the starting/ending timestamp and channel (1-4) for each block, and point the global constants in state.c to the new mp3 and note file.","link":"/rg526/"},{"title":"RLC Circuit Review","text":"tyz is going to have a 18220 midterm next week so he is going to review some simple RLC circuits! RCImagine there is a resistor and a capacitor connected in serial. Let $I_C$ be the current passing through the capacitor, $V_C$ be the voltage across the capacitor. Then the voltage across the resistor is $-V_C$. Assume the initial voltage across the capacitor is $V_0$. Since $I_C = C{ {d V_C} \\over {d t} }$, we have $R C{ {d V_C} \\over {d t} } + V_C = 0$, and ${ {d V_C} \\over {d t} } + {1 \\over {RC} } V_C = 0$. Solving this equation we have $V_C = A e^{- {t \\over {RC} } }$. Applying the initial value, we have $V_C = V_0 e^{- {t \\over {RC} } }$. Let time constant $\\tau = RC$, $V_C = V_0 e^{- {t \\over \\tau} }$ RC with voltage sourceThere is a resistor and a capacitor, and also a voltage source $V_0$ in serial. This time we assume initial voltage across the capacitor is 0V. As capacitor eventually become open circuit, we know the voltage across capacitor eventually becom $V_0$. Since $I_C = C{ {d V_C} \\over {d t} }$, we have $R C{ {d V_C} \\over {d t} } + V_C = V_0$, or ${ {d V_C} \\over {d t} } + { {V_C} \\over {RC} } = { {V_0} \\over {RC} }$. Solving this differential equation, we have $V_C = A e^{- {t \\over {RC} } } + V0$. Applying initial value we have $V_C = A (1 - e^{- {t \\over \\tau} })$. RLImagine there is a resisor and an inductor connected in serial. Let $I_L$ be the current passing through the inductor (and also the resistor), $V_L$ be the voltage across the inductor. Assume initial current passing the inductor is $I_0$. Since $V_L = L { {d I_L} \\over {dt} }$, we have $L { {d I_L} \\over {dt} } + R I_L = 0$, or ${ {d I_L} \\over {dt} } + {R \\over L} I_L = 0$. Solving this we got $I_L = A e^{- {R \\over L} t }$. Let $\\tau = {L \\over R}$ and applying initial value, we have $I_L = I_0 e^{- {t \\over \\tau} }$. RL with voltage sourceNow we have a voltage source $V_0$ in addition! As inductor eventually become short circuit, we know the current through the inductor eventually become $I_0$. Assume initial current through the inductor is 0A. Since $V_L = L { {d I_L} \\over {dt} }$, we have $L { {d I_L} \\over {dt} } + R I_L = V_0$, ${ {d I_L} \\over {dt} } + {R \\over L} I_L = {V_0 \\over L}$. So we have $I_L = {V_0 \\over R} + A e^{- {t \\over \\tau} }$. Applying the initial value we have $I_L = {V_0 \\over R} (1 - e^{- {t \\over \\tau} })$. LCImagine there is a inductor and a capacitor in serial, and we want to know the voltage across the capacitor $V_C$. Then voltage across inductor is $-V_C$. By $I = C{ {d V_C} \\over {dt} }$ and $-V_C = L { {dI} \\over {dt} }$, we have $-V_C = LC { {d^2 V_C} \\over {dt^2} }$, or ${ {d^2 V_C} \\over {dt^2} } + {V_C \\over {LC} } = 0$. Let $\\omega_0 = \\sqrt{1 \\over {LC} }$, we have $V_C = C_1 \\cos (\\omega_0 t) + C_2 \\sin (\\omega_0 t)$, and $V_C = R \\sin (\\omega_0 t + \\phi)$. RLCNow suppose we have a resistor, a inductor and a capacitor in parallel! And we also want to know $V_C$. Since $-V_C - IR = L { {dI} \\over {dt} }$, we have ${ {d^2 V_C} \\over {dt^2} } + {R \\over L} { {d V_C} \\over {dt} } + {V_C \\over {LC} } = 0$. Let $\\alpha = {R \\over {2L} }$, solving $r^2 + 2\\alpha r + (\\omega_0)^2 = 0$. Now solution is (assume $\\omega_0 &gt; \\alpha$), let $\\mu = \\sqrt{\\omega_0 ^ 2 - \\alpha ^ 2}$, $V_C = e ^ {-\\alpha} (C_1 \\cos (\\mu t) + C_2 \\sin (\\mu t) )$, and $V_C = e ^ {-\\alpha} R \\sin (\\mu t + \\phi) $ Other circuitsFor more complex circuits, we can always do nodal analysis! (QAQ) Label nodes and their voltages Write KCL formulas For voltage source, create a new variable of the current flowing through it and add an equation about the voltage difference across it For inductor, create a new variable of the current flowing through it and add an equation about the inductor voltage-current relation","link":"/rlc-review/"},{"title":"TNP: Introduction","text":"TNP (Tensor Native Processor) is a experimental processor design to run AI computation in a very efficient way. Primarily, TNP relies on systolic array to accelerate matrix operations (Google’s TPU also uses systolic arrays). However, we want to maximize systolic array performance, we make everything in the project design “tensor native”: 2-diagonal cacher read/write - Keep the systolic array busy. Matrix-shaped registers - Each matrix register has the same size as the systolic array. Now we can read/write rows, columns and diagonals for each matrix register. Local memory for each core (NUMA) - Maximize memory bandwidth, and avoid shared, last level cache. Vector-add ALU inside matrix core - Adding two vectors turns out to be a very common case during matrix multiplication, so we include it in the same core. And we want the compiler to have maximum control of underlying hardware, since the compiler is aware of the global computation structure: Software managed cache (instead of LRU) - More intelligent register resource allocation. Message-passing interface between cores - Let compilers explicitly indicate inter-core communication. Deterministic execution time - This helps us predict the execution time for any partial code. This enables a feedback loop for code generation/execution time evaluation right in compilation time. We implemented the hardware part (matrix cores, vector cores, switch) in SystemVerilog and the software part (assembler, compiler, ONNX interface) in C++. This project is initially a 15418/15618 course project (project poster).","link":"/tnp-intro/"},{"title":"V2ray Proxy Tool Configuration","text":"V2ray is a network proxy tool. One possible configuration is to use WebSocket transport along with TLS, so network traffic looks like good normal HTTPS/WSS traffic in public network, very nice and effective against China’s firewall. This can be used along with web servers such as Apache or Nginx for reverse proxy. The entire network route looks like 1browser &lt;=&gt; v2ray client &lt;=&gt; webserver &lt;=&gt; v2ray server First, download v2ray binaries for both client and server. V2ray Client Configuration12345678910111213141516171819202122232425262728293031{ &quot;inbound&quot;: { &quot;port&quot;: &lt;local socks port&gt;, &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;protocol&quot;: &quot;socks&quot; }, &quot;outbound&quot;: { &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: { &quot;vnext&quot;: [ { &quot;address&quot;: &quot;&lt;server address&gt;&quot;, &quot;port&quot;: 443, &quot;users&quot;: [ { &quot;id&quot;: &quot;&lt;uuid&gt;&quot; } ] } ] }, &quot;streamSettings&quot;: { &quot;network&quot;: &quot;ws&quot;, &quot;security&quot;: &quot;tls&quot;, &quot;wsSettings&quot;: { &quot;path&quot;: &quot;/&lt;path&gt;/&quot; } }, &quot;mux&quot;: {&quot;enabled&quot;: false} }} Sometimes MUX will cause entire connection to hang if one of them is broken, so I turn off this function. V2ray Server Configuration1234567891011121314151617181920212223242526272829{ &quot;log&quot;: { &quot;access&quot;: &quot;&lt;access log file path&gt;&quot;, &quot;error&quot;: &quot;&lt;error log file path&gt;&quot;, &quot;loglevel&quot;: &quot;warning&quot; }, &quot;inbound&quot;: { &quot;port&quot;: &lt;port number&gt;, &quot;listen&quot;:&quot;127.0.0.1&quot;, &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { &quot;id&quot;: &quot;&lt;uuid&gt;&quot; } ] }, &quot;streamSettings&quot;:{ &quot;network&quot;:&quot;ws&quot;, &quot;wsSettings&quot;: { &quot;path&quot;: &quot;/&lt;path&gt;/&quot; } } }, &quot;outbound&quot;: { &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: {} }} Apache ConfigurationWebserver needs to have valid TLS certificate, such as getting one from Let’s Encrypt by certbot, to encrypt traffic in public network. The webserver decrypts TLS traffic and “proxypass” the WebSocket content to backend localhost:port number v2ray server. 1234567&lt;LocationMatch &quot;&lt;path&gt;&quot;&gt; ProxyPass ws://127.0.0.1:&lt;port number&gt;/&lt;path&gt;/ ProxyAddHeaders Off ProxyPreserveHost On RequestHeader set Host %{HTTP_HOST}s RequestHeader set X-Forwarded-For %{REMOTE_ADDR}s&lt;/LocationMatch&gt; SecurityTo improve security, run v2ray as regular user instead of root, so that possible security vulnerbility in v2ray does not compromise the entire system. Create a Linux user using useradd and configure systemd service to run v2ray with that user and group. Set the port number to be large enough that does not require superuser permission. Further StepsV2ray has new features such as QUIC and HTTP/2 transport. Maybe I will try them later.","link":"/v2ray-tutorial/"},{"title":"Vertex Cover, Independent Set, Clique, and Matching","text":"Independent set &lt;=&gt; cliqueAn independent set S of G corresponds to a clique containing the same set of vertices S in G’s complement graph (flipping edges in E and not in E). This is because all vertex pair (i, j) in S is not an edge in G is equivalent to all vertex pair (i, j) in S is an edge in G’s complement graph. Vertex cover &lt;=&gt; independent setA vertex cover S in graph G corresponds to an independent set $V \\setminus S$ in G. If S is a valid vertex cover, any vertex pair (i, j) in $V \\setminus S$ is not an edge in G, so $V \\setminus S$ is independent set. If $V \\setminus S$ is an independent set, for any edge at least one endpoint is in S, so S is a vertex cover. Then MIN-VERTEX-COVER = MAX-INDEPENDENT-SET. Vertex cover &lt;=&gt; matching (in bipartite graph)In bipartite graph, the size of any matching is less or equal than the size of any vertex cover, and MAX-MATCHING = MIN-VERTEX-COVER. (a) Any matching &lt;= any vertex coverGiven a matching in a bipartite graph, we need to select at least one vertex from every matched edge. Otherwise, there exist matched edge that isn’t covered. So matching &lt;= vertex cover. (b) MAX-MATCHING = MIN-VERTEX-COVERFrom a maximum matching M, we can construct a vertex cover by (1) direct all matched edge from Y to X and all unmatched edge from X to Y, (2) run a DFS from all unmatched vertices in X, and (3) construct set R by all unvisited vertices in X and all visited vertices in Y. The only type of edge that has both endpoints not in R consists of a visited vertex u in X and a unvisited vertex v in Y. If {u, v} is a unmatched edge, then v should be reachable by appending (u, v) to the path to u. If {u, v} is a matched edge, then the only incoming edge towards u is (v, u). Then u cannot be reachable if v is unreachable. Both cases lead to contradiction. So all edge contains some endpoint in R and R is a valid vertex cover. Unvisited vertices in X corresponds to a matched edge (otherwise they will be initially visited by DFS). Visited vertices in Y corresponds to a matched edge (otherwise we have an augmenting path between two unmatched vertices, but M is a maximum matching). Because unvisited vertices in X are not reachable, these edges can not intersect. So |R| &lt;= |M|. Then there exist some vertex cover whose size is at most |M|, so MIN-VERTEX-COVER &lt;= |M|, and MIN-VERTEX-COVER = MAX-MATCHING.","link":"/vc-ind-clique-matching/"},{"title":"Very Slow Computer","text":"Very Slow Computer is a project in build18 2023. It has an adder/comparator built from NAND gates. And it can run programs for 15251’s “register machine” model.","link":"/very-slow-computer/"},{"title":"Welcome to ECE!","text":"","link":"/welcome-to-ece/"},{"title":"Windows 11 Review","text":"Recently I upgraded my Windows installation to Windows 11! Overall the UI looks nice to me. Some really awful things: You need to right click twice to get context menu No vertical taskbar You cannot show all icons on taskbar If you run the Win10-&gt;Win11 updater without admin privilege, it will fail at 74% with a random error code More Microsoft ad… I want to use Firefox, not Edge… After the update, Windows Terminal is very nice (although PowerShell is still awful… it tries to override curl and wget). Also, there is a notepad with dark mode! Actually, the notepad is still there… There’s something called “app execution alias”, which sounds like a Microsoft-style idea (one more redirection layer!) and if you turn “notepad.exe” off, the old notepad comes back!","link":"/win11/"}],"tags":[{"name":"Go","slug":"Go","link":"/tags/Go/"},{"name":"Misc","slug":"Misc","link":"/tags/Misc/"},{"name":"AMD","slug":"AMD","link":"/tags/AMD/"},{"name":"Architecture","slug":"Architecture","link":"/tags/Architecture/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"ICPC","slug":"ICPC","link":"/tags/ICPC/"},{"name":"FRP","slug":"FRP","link":"/tags/FRP/"},{"name":"Google Code Jam","slug":"Google-Code-Jam","link":"/tags/Google-Code-Jam/"},{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"MOSFET","slug":"MOSFET","link":"/tags/MOSFET/"},{"name":"NVIDIA","slug":"NVIDIA","link":"/tags/NVIDIA/"},{"name":"OpenGL ES","slug":"OpenGL-ES","link":"/tags/OpenGL-ES/"},{"name":"Gtk+","slug":"Gtk","link":"/tags/Gtk/"},{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"},{"name":"PulseAudio","slug":"PulseAudio","link":"/tags/PulseAudio/"},{"name":"SystemVerilog","slug":"SystemVerilog","link":"/tags/SystemVerilog/"},{"name":"RLC","slug":"RLC","link":"/tags/RLC/"},{"name":"TNP","slug":"TNP","link":"/tags/TNP/"},{"name":"Proxy","slug":"Proxy","link":"/tags/Proxy/"},{"name":"Graph","slug":"Graph","link":"/tags/Graph/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"}],"categories":[]}