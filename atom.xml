<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tyz&#39;s blog</title>
  
  <subtitle>tyz&#39;s blog</subtitle>
  <link href="https://hyabc.github.io/atom.xml" rel="self"/>
  
  <link href="https://hyabc.github.io/"/>
  <updated>2023-03-27T01:40:43.356Z</updated>
  <id>https://hyabc.github.io/</id>
  
  <author>
    <name>Tom Tang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Functional Programming is Terrible</title>
    <link href="https://hyabc.github.io/functional-programming/"/>
    <id>https://hyabc.github.io/functional-programming/</id>
    <published>2023-03-27T00:40:45.000Z</published>
    <updated>2023-03-27T01:40:43.356Z</updated>
    
    <content type="html"><![CDATA[<p>Functional programming is somewhat popular at CMU. There is even a <a href="https://www.cs.cmu.edu/~15150/">course</a> about it. However, functional programming is the worst programming paradigm. For the marketing points of the course,</p><ul><li>FP isn’t better for program verification: Verification is almost trivial without mutable states, in almost all programming languages. Analyzing control flow, etc. isn’t hard as long as the syntax is well-defined. States are the challenge to automatic verification, and functional programming is supposed to be immutable and have no state. But you can’t avoid states in real life. States are what makes software useful. If you write a program without mutable states, it is essentially one huge expression and just some adapter code. You can’t even implement dynamic programming without some kind of states for memorization. </li><li>FP makes parallelism harder: It is true that making more things immutable can reduce the possibility for race conditions. But all common languages have <code>const</code> or <code>final</code> that control it better. And other languages have better parallelism ecosystem. C++ has CUDA&#x2F;SIMD instrinstics, Go has goroutines, Java has Hadoop, and there are many others. </li><li>Abstraction: It’s way easier to implement proper abstraction with OOP languages. OOP is mostly just about abstraction&#x2F;encapsulation, and it does really well at that. OCaml has better abstraction by learning from OOP, but the syntax is still somewhat counterintuitive.</li></ul><p>And most FP languages use terrible language constructs,</p><ul><li>ADT: Abstract data types is a very inefficient way to represent data. ADT is often used recursively (if not, it is as harmless as <code>std::variant</code>). And it can be huge: there are often programs that store trees in ADT. The data have to be allocated on heap (compilers can’t know the size in advance) and all nodes are tagged (to store the variant). Now some seemingly innocuous data structures can be very inefficient. </li><li>Pattern matching: Pattern matching has to be sequential because of the pattern matching priority from top to bottom, which makes it no more useful than a long list of if&#x2F;else. And unfortunately you can’t avoid pattern matching because of ADT.</li><li>FP significantly decreases code readability and maintainability: Lack of common features like loops, you have to use lambda functions instead. This is much more difficult to read than something like range-based for in most languages. You have to write a function to print 5 “Hello, world!” and good luck on your stack usage. And it  becomes worse with high order function, it just wastes programmer effort to understand the code and the control flow. Most languages actually have a human-readable control flow, as early as Fortran! Don’t overuse lambda functions, in any language. </li><li>Code reuse: There is essentially no polymorphism in FP languages. The type system is at most something like C++20 concepts and broken generics, that’s NOT polymorphism. </li><li>FP makes complexity analysis harder: Do you want to analyze the time complexity of a huge mess of lambdas, function arguments, closures and expressions?</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Functional programming is somewhat popular at CMU. There is even a &lt;a href=&quot;https://www.cs.cmu.edu/~15150/&quot;&gt;course&lt;/a&gt; about it. However,</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://hyabc.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Very Slow Computer</title>
    <link href="https://hyabc.github.io/very-slow-computer/"/>
    <id>https://hyabc.github.io/very-slow-computer/</id>
    <published>2023-01-29T19:07:48.000Z</published>
    <updated>2023-01-29T19:12:14.135Z</updated>
    
    <content type="html"><![CDATA[<p>Very Slow Computer is a project in build18 2023. It has an adder&#x2F;comparator built from NAND gates. And it can run programs for 15251’s “register machine” model.</p><img src="/images/vsc/1.jpg" style="max-height: 200px;"><img src="/images/vsc/2.jpg" style="max-height: 200px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Very Slow Computer is a project in build18 2023. It has an adder&amp;#x2F;comparator built from NAND gates. And it can run programs for 15251</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://hyabc.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>TNP: Introduction</title>
    <link href="https://hyabc.github.io/tnp-intro/"/>
    <id>https://hyabc.github.io/tnp-intro/</id>
    <published>2023-01-15T21:34:42.000Z</published>
    <updated>2023-01-15T22:10:58.805Z</updated>
    
    <content type="html"><![CDATA[<p>TNP (Tensor Native Processor) is a experimental processor design to run AI computation in a very efficient way. Primarily, TNP relies on systolic array to accelerate matrix operations (Google’s <a href="https://cloud.google.com/blog/products/ai-machine-learning/an-in-depth-look-at-googles-first-tensor-processing-unit-tpu">TPU</a> also uses systolic arrays). However, we want to maximize systolic array performance, we make everything in the project design “tensor native”:</p><ul><li>2-diagonal cacher read&#x2F;write - Keep the systolic array busy.</li><li>Matrix-shaped registers - Each matrix register has the same size as the systolic array. Now we can read&#x2F;write rows, columns and diagonals for each matrix register.</li><li>Local memory for each core (NUMA) - Maximize memory bandwidth, and avoid shared, last level cache.</li><li>Vector-add ALU inside matrix core - Adding two vectors turns out to be a very common case during matrix multiplication, so we include it in the same core.</li></ul><p>And we want the compiler to have maximum control of underlying hardware, since the compiler is aware of the global computation structure:</p><ul><li>Software managed cache (instead of LRU) - More intelligent register resource allocation.</li><li>Message-passing interface between cores - Let compilers explicitly indicate inter-core communication.</li><li>Deterministic execution time - This helps us predict the execution time for any partial code. This enables a feedback loop for code generation&#x2F;execution time evaluation right in compilation time.</li></ul><p>We implemented the hardware part (matrix cores, vector cores, switch) in SystemVerilog and the software part (assembler, compiler, ONNX interface) in C++.</p><p>This project is initially a <a href="https://www.cs.cmu.edu/~15418/">15418&#x2F;15618</a> course project (project <a href="files/tnp-poster.pdf">poster</a>).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TNP (Tensor Native Processor) is a experimental processor design to run AI computation in a very efficient way. Primarily, TNP relies on </summary>
      
    
    
    
    
    <category term="TNP" scheme="https://hyabc.github.io/tags/TNP/"/>
    
  </entry>
  
  <entry>
    <title>Hello, modules!</title>
    <link href="https://hyabc.github.io/hello-modules-cpp20/"/>
    <id>https://hyabc.github.io/hello-modules-cpp20/</id>
    <published>2023-01-14T03:47:19.000Z</published>
    <updated>2023-01-15T02:13:14.856Z</updated>
    
    <content type="html"><![CDATA[<p>Module is a very exciting part of C++20. Similar to Go modules, C++20 modules can save the compiler from repeatedly scanning header files. This will make C++ code build faster and become more modular (independent of #include order). And the Hello World program becomes easier to write XD</p><p>This program is compiled using cl.exe 19.33 (MSVC v143, Visual Studio 2022). Gcc and Clang still don’t support importing standard library yet, and MSVC support is still experimental. But the future of C++ looks great!</p><img src="/images/cpp20-modules.png" style="max-height: 200px;"><p>I learned C++98 in around 2014 (due to outdated C++ compilers in National Olympiad of Informatics: we were still using Ubuntu 10.10 (a non-LTS version, EOL in 2011) in competitions then because it still works). Since C++98, C++ has evolved significantly and helps programmers write modern, efficient code. The largest evolution is probably C++11 and C++20. Some impressive new features are:</p><ul><li><code>auto</code> -  Automatic type deduction, which saves us from typing something like <code>std::vector&lt;std::vector&lt;int&gt; &gt;::const_iterator</code> manually.</li><li><code>constexpr</code> and <code>consteval</code> - Compile time evaluation. As C++ users, we want extreme performance!</li><li><code>enum class</code> and <code>std::variant</code> - More structured enums and unions. Finally they are not just integer values.</li><li>Range-based for - I guess it’s syntactic sugar, but it can be life-saving!</li><li>Smart pointers - RAII is the right way to handle memory (as well as other resources) in an efficient way. </li><li>concepts - Makes generic programming more fun and reliable.</li><li><code>T&amp;&amp;</code> - RValue reference. Together with copy elision, we can make data flow more efficiently by removing redundant copy operations. (Which type is <code>auto&amp;&amp;</code>?)</li><li>Lambda function <code>[] () &#123;&#125;</code> - Sounds useful with STL algorithms. </li><li>Ranges - More powerful “iterators”!</li><li>Lots of cool stuff in STL (<code>std::thread</code>, <code>std::atomic</code>, <code>std::bind</code>, <code>std::chrono</code>, and many others).</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Module is a very exciting part of C++20. Similar to Go modules, C++20 modules can save the compiler from repeatedly scanning header files</summary>
      
    
    
    
    
    <category term="C++" scheme="https://hyabc.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Christmas 2022</title>
    <link href="https://hyabc.github.io/christmas-2022/"/>
    <id>https://hyabc.github.io/christmas-2022/</id>
    <published>2022-12-26T00:42:36.000Z</published>
    <updated>2022-12-26T01:04:46.453Z</updated>
    
    <content type="html"><![CDATA[<p>Merry Christmas!</p><p>All stores near CMU are closed, so I bought some “Instant Ramen”!</p><img src="/images/food/noodle-1.jpg" style="height: 200px;"><img src="/images/food/noodle-2.jpg" style="height: 200px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Merry Christmas!&lt;/p&gt;
&lt;p&gt;All stores near CMU are closed, so I bought some “Instant Ramen”!&lt;/p&gt;
&lt;img src=&quot;/images/food/noodle-1.jpg&quot; style=</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://hyabc.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>PulseAudio Issue</title>
    <link href="https://hyabc.github.io/pulseaudio-issue/"/>
    <id>https://hyabc.github.io/pulseaudio-issue/</id>
    <published>2022-11-02T17:05:15.000Z</published>
    <updated>2023-01-15T02:48:10.954Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I upgraded to Linux kernel 5.19 (using Debian backports) and updated UEFI firmware. First, there is a kernel error message about unstable tsc clocksource issue, and I added <code>tsc=nowatchdog</code> to kernel parameter (also I added <code>iommu=pt</code>). (This is a bug in Lenovo’s firmware.) However, the audio output from 3.5mm audio jack contains some noise. It is solved after I changed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load-module module-udev-detect</span><br></pre></td></tr></table></figure><p>to </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load-module module-udev-detect tsched=0</span><br></pre></td></tr></table></figure><p>in <code>/etc/pulse/default.pa</code>, but I still don’t know why it works.</p><p><strong>Update:</strong> My microphone doesn’t work recently, and it works after I reverted this change…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently I upgraded to Linux kernel 5.19 (using Debian backports) and updated UEFI firmware. First, there is a kernel error message about</summary>
      
    
    
    
    
    <category term="PulseAudio" scheme="https://hyabc.github.io/tags/PulseAudio/"/>
    
  </entry>
  
  <entry>
    <title>CMU Course List</title>
    <link href="https://hyabc.github.io/cmu-course-list/"/>
    <id>https://hyabc.github.io/cmu-course-list/</id>
    <published>2022-10-24T19:46:24.000Z</published>
    <updated>2022-10-24T19:47:45.560Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cmucourselist.org/">CMU Course List</a> (Project Candela) is released (including next semester courses)! Welcome to post comments/tags/pages to courses!</p><img src="/images/projcd/1.png" style="height: 200px;"><img src="/images/projcd/2.png" style="height: 200px;"><img src="/images/projcd/3.png" style="height: 200px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cmucourselist.org/&quot;&gt;CMU Course List&lt;/a&gt; (Project Candela) is released (including next semester courses)! Welcome to post</summary>
      
    
    
    
    
    <category term="Go" scheme="https://hyabc.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Windows 11 Review</title>
    <link href="https://hyabc.github.io/win11/"/>
    <id>https://hyabc.github.io/win11/</id>
    <published>2022-10-11T02:25:27.000Z</published>
    <updated>2022-10-11T02:40:30.862Z</updated>
    
    <content type="html"><![CDATA[<p>Recently I upgraded my Windows installation to Windows 11! Overall the UI looks nice to me. </p><p>Some really awful things:</p><ul><li>You need to right click twice to get context menu</li><li>No vertical taskbar</li><li>You cannot show all icons on taskbar</li><li>If you run the Win10-&gt;Win11 updater without admin privilege, it will fail at 74% with a random error code</li><li>More Microsoft ad… I want to use Firefox, not Edge…</li></ul><p>After the update, Windows Terminal is very nice (although PowerShell is still awful… it tries to override curl and wget). Also, there is a notepad with dark mode! </p><img src="/images/win11-notepad/2.png" style="height: 300px;"><p>Actually, the notepad is still there… There’s something called “app execution alias”, which sounds like a Microsoft-style idea (one more redirection layer!)</p><img src="/images/win11-notepad/1.png" style="height: 350px;"><p>and if you turn “notepad.exe” off, the old notepad comes back!</p><img src="/images/win11-notepad/3.png" style="height: 300px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Recently I upgraded my Windows installation to Windows 11! Overall the UI looks nice to me. &lt;/p&gt;
&lt;p&gt;Some really awful things:&lt;/p&gt;
&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="Windows" scheme="https://hyabc.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Quartus Warnings</title>
    <link href="https://hyabc.github.io/quartus-warning/"/>
    <id>https://hyabc.github.io/quartus-warning/</id>
    <published>2022-10-08T22:04:40.000Z</published>
    <updated>2022-10-08T22:06:41.630Z</updated>
    
    <content type="html"><![CDATA[<p>Real C++ programmers ignore warnings!</p><img src="/images/quartus.png" style="height: 180px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Real C++ programmers ignore warnings!&lt;/p&gt;
&lt;img src=&quot;/images/quartus.png&quot; style=&quot;height: 180px;&quot;&gt;
</summary>
      
    
    
    
    
    <category term="SystemVerilog" scheme="https://hyabc.github.io/tags/SystemVerilog/"/>
    
  </entry>
  
  <entry>
    <title>Code Jam 2022</title>
    <link href="https://hyabc.github.io/gcj-2022/"/>
    <id>https://hyabc.github.io/gcj-2022/</id>
    <published>2022-08-22T15:23:06.000Z</published>
    <updated>2022-09-01T22:50:55.251Z</updated>
    
    <content type="html"><![CDATA[<p>I received a Google Code Jam 2022 T-shirt:</p><img src="/images/codejam2022/1.jpg" style="height: 300px;"><img src="/images/codejam2022/2.jpg" style="height: 300px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I received a Google Code Jam 2022 T-shirt:&lt;/p&gt;
&lt;img src=&quot;/images/codejam2022/1.jpg&quot; style=&quot;height: 300px;&quot;&gt;
&lt;img src=&quot;/images/codejam2022</summary>
      
    
    
    
    
    <category term="Google Code Jam" scheme="https://hyabc.github.io/tags/Google-Code-Jam/"/>
    
  </entry>
  
  <entry>
    <title>赫炎のインガノック / Sekien no Inganock</title>
    <link href="https://hyabc.github.io/inganock/"/>
    <id>https://hyabc.github.io/inganock/</id>
    <published>2022-08-17T00:04:52.000Z</published>
    <updated>2022-08-20T14:43:35.646Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://store.steampowered.com/app/982400">赫炎的印加诺克</a>是Liar-soft的蒸汽朋克系列之一。作者是<a href="http://sakuraihikaru.com/">桜井光</a>，绘画是<a href="http://hissoriaraara.blog67.fc2.com/">大石竜子</a>。</p><img src="/images/inganock/1.png" style="height: 200px;"><p>印加诺克的剧情我认为非常有趣。蒸汽朋克的世界，”复活” “造物” “奇械” 的概念，”数式” “机关” “Cracking” “Critter” 等超自然现象，以及变异后变得更可爱 (大雾) 的人类。游戏的主角: 寂，黑猫，(迷之) 琪雅带领用户在印加诺克的世界中探索。故事中其他角色也非常吸引人。比如热爱垂钓的老师 (以及钓到的Liar-soft罐头) : </p><img src="/images/inganock/2.png" style="height: 200px;"><p>本作的绘画也是相当出色。我上一个玩的游戏是Liar-soft/ANIPLEX.EXE的<a href="https://store.steampowered.com/app/1094820">徒花異譚</a>，以及传说级别的Liar-soft的Forest，均为来自的大石竜子高质量的的绘画。极致的色彩，抽象的形状，以及氛围塑造 (说到氛围塑造，突然想起了腐姬) 都十分完美。音乐也很好。</p><img src="/images/inganock/3.png" style="height: 200px;"><img src="/images/inganock/4.png" style="height: 200px;"><p>个人更加偏好大石竜子近期的绘画风格 (比如下图, 出色的色彩)，但是印加诺克的绘画也给我带来了同样的震撼。</p><img src="/images/inganock/5.png" style="height: 200px;"><p>我觉得印加诺克是Liar-soft又一完美的作品。结局也出乎我的意料。唯一的缺点也许是过于简短的战斗场景 (对于我可能无所谓)。同时，心声系统也很有趣，并且对我非常友好 (不需要攻略就能完成)。最后，游戏的OP (Adenium) :</p><iframe style="aspect-ratio: 16/9; width: 100%;" src="https://www.youtube-nocookie.com/embed/Sj5ptm7EKnY?modestbranding=1&rel=0&disablekb=1" title="YouTube video player" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://store.steampowered.com/app/982400&quot;&gt;赫炎的印加诺克&lt;/a&gt;是Liar-soft的蒸汽朋克系列之一。作者是&lt;a href=&quot;http://sakuraihikaru.com/&quot;&gt;桜井光&lt;/a&gt;，绘画是&lt;a h</summary>
      
    
    
    
    
    <category term="Game" scheme="https://hyabc.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>NVIDIA Omniverse Ramen Shop</title>
    <link href="https://hyabc.github.io/nvidia-ramen-shop/"/>
    <id>https://hyabc.github.io/nvidia-ramen-shop/</id>
    <published>2022-06-12T15:15:47.000Z</published>
    <updated>2022-06-12T16:52:44.239Z</updated>
    
    <content type="html"><![CDATA[<p>NVIDIA created a ramen shop using the NVIDIA omniverse platform. Here is a video of the ramen shop (<a href="https://blogs.nvidia.com/blog/2022/04/25/making-of-omniverse-ramen-shop/">original blog post</a>):</p><iframe style="aspect-ratio: 16/9; width: 100%;" src="https://www.youtube-nocookie.com/embed/gQkrt5pSj68?modestbranding=1&rel=0&disablekb=1" title="YouTube video player" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>This video is absolutely mind-blowing for me. Using NVIDIA’s graphics technology, human beings are able to replicate the real world in digital systems with an amazing amount of details. This capability is fueled by the growth of the gaming industry towards a more realistic and exciting gaming experience. </p><p>The “omniverse” capability would help many industries digitalize. They can use omniverse to create more advanced and complex models (compared to traditional CAD models) and do more simulations before making a physical prototype, which will transform the development process and help companies innovate faster. This is a step closer to a fully digitalized world.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;NVIDIA created a ramen shop using the NVIDIA omniverse platform. Here is a video of the ramen shop (&lt;a href=&quot;https://blogs.nvidia.com/blo</summary>
      
    
    
    
    
    <category term="NVIDIA" scheme="https://hyabc.github.io/tags/NVIDIA/"/>
    
  </entry>
  
  <entry>
    <title>Computer Design</title>
    <link href="https://hyabc.github.io/computer-design/"/>
    <id>https://hyabc.github.io/computer-design/</id>
    <published>2022-03-19T00:19:17.000Z</published>
    <updated>2022-03-26T00:42:50.001Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.amazon.com/Computer-Organization-Design-RISC-V-Architecture/dp/0128122757">This book</a> is a very fun book about computer architecture, and I highly recommend this book! It describes some design concepts that are quite useful in the real world:</p><ul><li>Design for Moore’s law</li><li>Use abstraction to simplify design</li><li>Make the common case fast</li><li>Performance via parallelism</li><li>Performance via pipelining</li><li>Performance via prediction</li><li>Hierarchy of memories</li><li>Dependability via redundancy</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Computer-Organization-Design-RISC-V-Architecture/dp/0128122757&quot;&gt;This book&lt;/a&gt; is a very fun book about co</summary>
      
    
    
    
    
    <category term="Architecture" scheme="https://hyabc.github.io/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>ACM-ICPC ECNA 2021 Solution</title>
    <link href="https://hyabc.github.io/ecna21/"/>
    <id>https://hyabc.github.io/ecna21/</id>
    <published>2022-03-10T17:00:05.000Z</published>
    <updated>2022-03-11T22:08:54.283Z</updated>
    
    <content type="html"><![CDATA[<p>ACM-ICPC <a href="https://icpc-ecna.ysu.edu/PastResults/2021/home.html">East Central North America</a> Regional 2021 was held on Feb 27, 2022. Here is a <a href="https://ecna21.kattis.com/standings">link</a> to the contest scoreboard, and I’m part of the team CMU9. </p><img src="/images/ecna2021-scoreboard.jpg" style="height: 300px;"><p>The contest was held on computer clusters on 5th floor of GHC, because the competition was remote this year. Here is a photo of the contest!</p><img src="/images/ecna2021-photo.jpg" style="height: 300px;"><h3 id="A-1’s-For-All"><a href="#A-1’s-For-All" class="headerlink" title="A. 1’s For All"></a>A. 1’s For All</h3><p>Notice the unusual 15 second time limit. We can brute-force with a simple $O(n^2)$ DP and costs $5 \times 10^9$ time. And surprisingly, it passed the time limit!</p><h3 id="B-Abridged-Reading"><a href="#B-Abridged-Reading" class="headerlink" title="B. Abridged Reading"></a>B. Abridged Reading</h3><p>We want to select arbitrary two leaf nodes and the costs is all its ancestors. So for any two leaf nodes, we can compute their LCA and then compute their cost.</p><h3 id="C-Ball-of-Whacks"><a href="#C-Ball-of-Whacks" class="headerlink" title="C. Ball of Whacks"></a>C. Ball of Whacks</h3><p>This problem looks too frustrating… I don’t like 3D objects.</p><h3 id="D-Downsizing"><a href="#D-Downsizing" class="headerlink" title="D. Downsizing"></a>D. Downsizing</h3><p>If you plug in any curve to the equation of the corresponding line, you will find that each curve is a piece of another circle. Now you can calculate the circle area. You can add the area of sector in the circle (1), subtract the triangle from circle center to the endpoints (2), and add triangle from point O to the endpoints (3). Then you get the directional area and then sum up.</p><p>However, we got numerous Wrong Answer for this problem. There are two major issues. First, the line can intersect with the large circle. In this case, the generated circle has infinite radius and becomes a line, so you only need to calculate part (3). Second, when the circle sector is 180 degrees, you can’t determine whether it is $+180^\circ$ or $-180^\circ$. The two endpoints and the center of generated circle are on the same line. You will need to look at the sign of area (3) to determine the sign of (1).</p><h3 id="E-Gambling-Game"><a href="#E-Gambling-Game" class="headerlink" title="E. Gambling Game"></a>E. Gambling Game</h3><p>This is a probability DP problem. You can use $f[i][j]$ to represent the probability of winning when you have i square remaining on your paper while there are j ball announces left. Now you can easily determine the probability of current ball announce eliminating a square, because the number of balls remaining decreases one when the number of ball announces decrease one. Then you can use Python bigint to avoid writing bigint manually!</p><h3 id="F-Growing-Some-Oobleck"><a href="#F-Growing-Some-Oobleck" class="headerlink" title="F. Growing Some Oobleck"></a>F. Growing Some Oobleck</h3><p>This is a simuation problem. Every time when there exist circles to be merged, you simulate the merge operation. When there are no circles to be merged, you determine the next timestamp that a circle merge will happen, and fast forward to that time. Be careful of floating point precision problem!</p><h3 id="G-Noonerized-Spumbers"><a href="#G-Noonerized-Spumbers" class="headerlink" title="G. Noonerized Spumbers"></a>G. Noonerized Spumbers</h3><p>Brute-force all possible prefixes. Because all integers are smaller than $2^{31}$, the length of integers are at most 10. So it will work.</p><h3 id="H-Numble"><a href="#H-Numble" class="headerlink" title="H. Numble"></a>H. Numble</h3><p>(I don’t know how to solve this)</p><h3 id="I-Pinned-Files"><a href="#I-Pinned-Files" class="headerlink" title="I. Pinned Files"></a>I. Pinned Files</h3><p>List the pinned elements and unpinned elements separately. First, in the optimal strategy, for any element, you operate on (pin/unpin) it at most twice. If you pin/unpin/pin element i, the result is equivalent to pin i at the timestamp of your last pin. If you pin/unpin/pin/unpin element j, the result is equivalent to pin/unpin j at the timestamp of last two operations (pin/unpin). Your previous operations to adjust the order become completely useless at the timestamp of your latest operation. </p><p>Now, for any element that begin in the pinned list and end in the unpinned list (or opposite), it can only be operated exactly once. For any element that begin and end in the same list, it can cost zero or two operations. We want to maximize the zero-operation element, so we can just greedily count how many elements do not need any operation.</p><h3 id="J-Recycling"><a href="#J-Recycling" class="headerlink" title="J. Recycling"></a>J. Recycling</h3><p>Use a monotone stack to compute the nearest element larger than itself to the left and to the right. Then loop over all elements to find the answer.</p><h3 id="K-Stable-Table"><a href="#K-Stable-Table" class="headerlink" title="K. Stable Table"></a>K. Stable Table</h3><p>First, we can construct a directed graph, with “u =&gt; v” denoting if v is stable, then u is stable (equivalently, any square of node u is one square above any square of node v). We have a “top” set (containing at most 2 elements) and a “bottom” set, and we want the minimum number of paths from all top nodes toward any bottom node, and paths can be shared. We can start by a BFS with sources from all bottom nodes.</p><p>If there are one top nodes, we just want a simple shortest path, and this is computed in BFS. If there are two top nodes, denoted by root1 and root2, an existing solution is the sum of distance from bottom node to root1 and root2. But the two top nodes can also share path to reach any bottom node. Then the path should look like a fork: whenever two path intersect, they intersect until bottom node. Now we can do another two BFS from root1 and root2, then iterate over all nodes (to consider it as the potential path intersection), and its value is the sum of three BFS (starting from i to root1, root2 and bottom node).</p><h3 id="L-Statues"><a href="#L-Statues" class="headerlink" title="L. Statues"></a>L. Statues</h3><p>We can iterate over all possible directions, and for any square, count if it exists on its corresponding diagonal. Then compute the minimum answer among all direction.</p><h3 id="M-Tomb-Hater"><a href="#M-Tomb-Hater" class="headerlink" title="M. Tomb Hater"></a>M. Tomb Hater</h3><p>In this problem, because you can only move left/right/down, and you can visit one square only once, we know that we always visit a continuous segment on any line. Now we can maintain a Trie of the input strings, and make sure we are always staying on some node on the Trie. We can use DP with state $f[i][j][k]$ to represent we are currently on the i-th line, j-th column and Trie node k. Then we attempt to walk on the (i + 1)-th line and starting from column j. Notice that if we are on a Trie terminal node, we have the option of going back to root and continuing, so we have to maintain an array of all possible current Trie node.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ACM-ICPC &lt;a href=&quot;https://icpc-ecna.ysu.edu/PastResults/2021/home.html&quot;&gt;East Central North America&lt;/a&gt; Regional 2021 was held on Feb 27, </summary>
      
    
    
    
    
    <category term="ICPC" scheme="https://hyabc.github.io/tags/ICPC/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Icarus Theme Customization</title>
    <link href="https://hyabc.github.io/hexo-icarus-customization/"/>
    <id>https://hyabc.github.io/hexo-icarus-customization/</id>
    <published>2022-03-04T19:44:30.000Z</published>
    <updated>2022-03-04T20:25:08.708Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a> is a great theme for Hexo. And we can also customize it to make it more personal! We assume you installed hexo-theme-icarus as a node package via npm. If not, you can replace all the <code>node_modules/hexo-theme-icarus</code> path below to corresponding installation path. And make a backup of your current configuration before you proceed in case of any error!</p><h3 id="Even-More-Rounded-Corners"><a href="#Even-More-Rounded-Corners" class="headerlink" title="(Even More) Rounded Corners"></a>(Even More) Rounded Corners</h3><p>The various containers, or “cards”, on the web page already have rounded corners. However, sometimes they don’t look round enough. We can manually adjust how much we want the rectangle corner to be curved. Go to <code>node_modules/hexo-theme-icarus/include/style/base.styl</code> and change <code>$card-radius</code> to your preferred size. I’m using <code>$card-radius ?= 16px</code>.</p><h3 id="Change-Primary-Colors"><a href="#Change-Primary-Colors" class="headerlink" title="Change Primary Colors"></a>Change Primary Colors</h3><p>By default, the “primary” color of this website is blue, which is the color of the color of hyperlinks, and active elements when you hover your mouse. This can be customized in the same <code>base.styl</code> file. Change the <code>$primary</code> variable to your favourite color, and there’s also other interesting variables like <code>$navbar-item-active-color</code> that you might consider to change.</p><p>In the same file, you can also configure other elements like card shadows. It follows the same format as the usual <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow">CSS box-shadow</a>.</p><h3 id="Wide-Screen-Page-Width"><a href="#Wide-Screen-Page-Width" class="headerlink" title="Wide Screen Page Width"></a>Wide Screen Page Width</h3><p>The default page width seems a bit too narrow under wide screens (there are some unused horizontal screen space). And you can modify it! Go to <code>node_modules/hexo-theme-icarus/include/style/responsive.styl</code> and this Javascript code determines the page width. For the widescreen section under function fullhd, I changed it to <code>max-width: $widescreen - 1 * $gap</code> and <code>width: $widescreen - 1 * $gap</code>. It’s sufficient for me to just minus one multiply the gap. Thanks <a href="http://www.anticme.com/2021/03/26/icarus%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/">this blog</a> for the solution!</p><h3 id="Change-Background-Image"><a href="#Change-Background-Image" class="headerlink" title="Change Background Image"></a>Change Background Image</h3><p>This one seems fun. Instead of the default grey background, you can configure something more interesting. You can simply put the css inside hexo-theme-icarus. Go to this directory: <code>node_modules/hexo-theme-icarus/source/css</code>, create a file (for example, <code>bg.styl</code>. You can use the generic way of setting the background image of any webpage:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;/path/to/your/background/image.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, include this file to the Hexo generation system by adding</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;bg&#x27;</span></span><br></pre></td></tr></table></figure><p>to <code>style.styl</code> file. Now you have a working background image in your website! This blog uses a CG from <a href="https://ja.wikipedia.org/wiki/%E3%82%B5%E3%82%AF%E3%83%A9%E3%83%8E%E8%A9%A9">Sakura no Uta</a> as the background image.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot;&gt;Icarus&lt;/a&gt; is a great theme for Hexo. And we can also customize it to make it mor</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://hyabc.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Glory to Ukraine</title>
    <link href="https://hyabc.github.io/glory-to-ukraine/"/>
    <id>https://hyabc.github.io/glory-to-ukraine/</id>
    <published>2022-02-27T18:12:09.000Z</published>
    <updated>2022-02-27T18:20:24.791Z</updated>
    
    <content type="html"><![CDATA[<p>The world has witnessed another unjust and evil war, even in the 21st century. We stand with Ukraine!</p><img src="/images/ukraine.jpg" style="height: 350px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The world has witnessed another unjust and evil war, even in the 21st century. We stand with Ukraine!&lt;/p&gt;
&lt;img src=&quot;/images/ukraine.jpg&quot; </summary>
      
    
    
    
    
    <category term="Misc" scheme="https://hyabc.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Project RhythmGame526</title>
    <link href="https://hyabc.github.io/rg526/"/>
    <id>https://hyabc.github.io/rg526/</id>
    <published>2022-02-20T02:47:21.000Z</published>
    <updated>2022-02-20T03:02:15.049Z</updated>
    
    <content type="html"><![CDATA[<p>The game mentioned in the last post was completed! We demonstrated this game system in last week’s <a href="https://www.build18.org/">Build18</a> event from the ECE department (Project <a href="https://www.build18.org/garage/project/704/">Haptic Rhythm Music Game</a>). Here are some photos of the system:</p><img src="/images/rg526/1.jpg" style="height: 120px;"><img src="/images/rg526/2.jpg" style="height: 120px;"><img src="/images/rg526/3.jpg" style="height: 120px;"><img src="/images/rg526/4.jpg" style="height: 120px;"><img src="/images/rg526/5.jpg" style="height: 120px;"><img src="/images/rg526/6.jpg" style="height: 120px;"><img src="/images/rg526/7.jpg" style="height: 120px;"><img src="/images/rg526/8.jpg" style="height: 120px;"><img src="/images/rg526/9.jpg" style="height: 240px;"><p>The <a href="https://www.adafruit.com/product/1201">vibrating motors</a> (the black discs in the photos) are fun! It provides a very powerful haptic effect as we attach it to a 5V power source and switched by a <a href="https://www.adafruit.com/product/355">MOSFET</a> from Raspberry PI GPIO ports.</p><p>And the code is structured so that it’s very easy to create customized games! You only need to create a “note” file containing the starting/ending timestamp and channel (1-4) for each block, and point the global constants in state.c to the new mp3 and note file. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The game mentioned in the last post was completed! We demonstrated this game system in last week’s &lt;a href=&quot;https://www.build18.org/&quot;&gt;Bui</summary>
      
    
    
    
    
    <category term="OpenGL ES" scheme="https://hyabc.github.io/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL ES 3 Review</title>
    <link href="https://hyabc.github.io/opengles-3-review/"/>
    <id>https://hyabc.github.io/opengles-3-review/</id>
    <published>2022-01-03T16:34:25.000Z</published>
    <updated>2022-01-03T23:30:53.446Z</updated>
    
    <content type="html"><![CDATA[<p>tyz is currently developing a <a href="https://github.com/rg526/rg526">game</a> based on OpenGL ES 3.0 for 3D graphics. This article will review how to develop an OpenGL ES 3 application.</p><h3 id="Shaders"><a href="#Shaders" class="headerlink" title="Shaders"></a>Shaders</h3><p>There are two types of shaders: vertex shader and fragment shader. Vertex shader processes data for each vertex and both specifies the actual position in the “clip space” (gl_Position) and passes data to fragment shader. Based on the incoming data, fragment shader processes data for each fragment (similar to pixel,  so fragment shaders are sometimes called pixel shaders) and specifies the color for the fragment. Both of shaders run on GPU to reduce CPU processing load. </p><p>This statement actually has a issue. Suppose you want to draw a triangle and the vertex shader passes on data about the three vertices. However, there are much more than three fragments inside the triangle surface that expects input. The graphics hardware will actually perform interpolation on the data from the output of vertex shader to input of fragment shader. Users can specify “flat interpolation” in OpenGL ES 3 API to disable such interpolation.</p><p>As users can write custom shaders, OpenGL ES 3 does not use a fixed graphics pipeline to perform different operations, like OpenGL ES 1.x. To support things like lighting effects, users should write vertex and fragment shaders.</p><h3 id="Attributes-and-uniforms"><a href="#Attributes-and-uniforms" class="headerlink" title="Attributes and uniforms"></a>Attributes and uniforms</h3><p>Input data are passed to the shader programs through attributes and uniforms. Attributes can be different for different input vertices. You can input either an array or a single element and the corresponding data for each vertex will go to shader input. However, OpenGL ES 3 requires a minimum of 16 attributes for all implementations, so to make program runs on every platforms that conforms to OpenGL ES 3 specification, the user can use at most 16 attributes. Uniforms are the same for all vertices, and the minimum number of supporting uniforms are much larger. </p><h3 id="Vertex-Buffer-Objects-VBO-and-Vertex-Array-Objects-VAO"><a href="#Vertex-Buffer-Objects-VBO-and-Vertex-Array-Objects-VAO" class="headerlink" title="Vertex Buffer Objects (VBO) and Vertex Array Objects (VAO)"></a>Vertex Buffer Objects (VBO) and Vertex Array Objects (VAO)</h3><p>Data transferring between main memory and graphics memory are expensive. It is not very efficient to transfer memory on each draw operation. OpenGL ES 3 supports creating a buffer on the graphics memory and storing data there, so that drawing is more efficient. Users can create a buffer by glGenBuffers and store by glBufferData. This is known as Vertex Buffer Objects. Because there are fixed number of buffer targets, users can use Vertex Array Objects to store multiple vertex array data, vertex indices data, etc. in different places.</p><h3 id="Textures"><a href="#Textures" class="headerlink" title="Textures"></a>Textures</h3><p>Textures can be applied when drawing objects. You can create a texture by glGenTextures and input the bitmap data into the texture by glTexImage2D. Then you can access texture data in shader programs by a sampler2D uniform.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;tyz is currently developing a &lt;a href=&quot;https://github.com/rg526/rg526&quot;&gt;game&lt;/a&gt; based on OpenGL ES 3.0 for 3D graphics. This article will</summary>
      
    
    
    
    
    <category term="OpenGL ES" scheme="https://hyabc.github.io/tags/OpenGL-ES/"/>
    
  </entry>
  
  <entry>
    <title>Demosplash 2021!</title>
    <link href="https://hyabc.github.io/demosplash-2021/"/>
    <id>https://hyabc.github.io/demosplash-2021/</id>
    <published>2021-11-13T03:23:18.000Z</published>
    <updated>2021-11-13T03:26:53.630Z</updated>
    
    <content type="html"><![CDATA[<p>CMU Computer Club is hosting Demosplash 2021! There are a lot of exciting machines!</p><img src="/images/demosplash/1.jpg" style="height: 200px;"><img src="/images/demosplash/2.jpg" style="height: 200px;"><img src="/images/demosplash/3.jpg" style="height: 200px;"><img src="/images/demosplash/4.jpg" style="height: 200px;"><img src="/images/demosplash/5.jpg" style="height: 200px;"><img src="/images/demosplash/6.jpg" style="height: 200px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CMU Computer Club is hosting Demosplash 2021! There are a lot of exciting machines!&lt;/p&gt;
&lt;img src=&quot;/images/demosplash/1.jpg&quot; style=&quot;height</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://hyabc.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Homecoming Week 2021</title>
    <link href="https://hyabc.github.io/homecoming-2021/"/>
    <id>https://hyabc.github.io/homecoming-2021/</id>
    <published>2021-11-06T17:21:28.000Z</published>
    <updated>2021-11-06T17:23:40.042Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cmu.edu/piper/news/archives/2021/november/tartan-community-day.html">Homecoming Week!</a></p><img src="/images/homecoming-2021.jpg" style="height: 400px;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cmu.edu/piper/news/archives/2021/november/tartan-community-day.html&quot;&gt;Homecoming Week!&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;/images/home</summary>
      
    
    
    
    
    <category term="Misc" scheme="https://hyabc.github.io/tags/Misc/"/>
    
  </entry>
  
</feed>
